#BlueJ class context
comment0.params=input
comment0.target=void\ printIt(java.lang.String)
comment0.text=\n\ This\ was\ an\ abandoned\ attempt\ at\ string\ parsing\n\ \n\ \ \ \ public\ static\ void\ complex()\n\ \ \ \ {\n\ \ \ \ \ \ \ \ \n\ \ \ \ \ \ \ \ \n\ \ \ \ \ \ \ \ //\ Prompt\ user\ for\ expression\n\ \ \ \ \ \ \ \ System.out.printf(\ "\\nEnter\ an\ expression\ to\ evaluate\:\ (or\ enter\ \\"HELP\\"\ for\ a\ list\ of\ commands)\\n"\ );\n\ \ \ \ \ \ \ \ Scanner\ kboard\ \=\ new\ Scanner(\ System.in\ );\n\ \ \ \ \ \ \ \ String\ input\ \=\ kboard.next();\n\ \ \ \ \ \ \ \ \n\ \ \ \ \ \ \ \ if(\ input\ \=\=\ "HELP"\ )\n\ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ System.out.printf(\ "\\n\#\#\#\#\#\ HELP\ \#\#\#\#\#\\n\ -Addition\:\ \\"+\\"\\n\ -Subtraction\:\ \\"-\\"\\n\ -Multiplication\:\ \\"x\\"\\t\\"X\\"\\t\\"*\\"\\n\ -Division\:\ \\"/\\"\\nORDER\ OF\ OPERATIONS\ WILL\ NOT\ BE\ FOLLOWED\\nOPERATIONS\ WILL\ BE\ PERFORMED\ FROM\ LEFT\ TO\ RIGHT\\n\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\\n\\nEnter\ an\ expression\ to\ evaluate\:\\n"\ );\n\ \ \ \ \ \ \ \ \ \ \ \ input\ \=\ kboard.next();\n\ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ \n\ \ \ \ \ \ \ \ input.toUpperCase();\ \ \ \ //\ change\ characters\ to\ uppercase\n\ \ \ \ \ \ \ \ input.trim();\ \ \ \ \ \ \ \ \ \ \ //\ trim\ any\ whitespace\ from\ ends\ of\ string\n\ \ \ \ \ \ \ \ int\ length\ \=\ input.length();\ \ \ \ //\ find\ the\ length\ of\ the\ input\n\ \ \ \ \ \ \ \ \n\ \ \ \ \ \ \ \ ///////////////////////////////////////\n\ \ \ \ \ \ \ \ /////\ \ BEGIN\ STRING\ PARSING\ CODE\ \ /////\n\ \ \ \ \ \ \ \ ///////////////////////////////////////\n\ \ \ \ \ \ \ \ \n\ \ \ \ \ \ \ \ int\ charType[\ length\ ]\ \=\ {\ 0\ };\ //\ keeps\ track\ of\ numbers\ (0),\ continued\ numbers\ (1),\ operators\ (2),\ decimal\ points\ (3),\ and\ invalid\ characters\ (4)\n\ \ \ \ \ \ \ \ for(\ int\ character\ \=\ 0,\ character\ <\ length,\ character++\ )\n\ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ switch(\ input[\ character\ ]\ )\n\ \ \ \ \ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ case\ "+"\ ||\ "-"\ ||\ "x"\ ||\ "X"\ ||\ "*"\ ||\ "/"\ \:\ \ \ //opperators\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if(\ character\ \=\=\ 0\ )\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ //\ there's\ a\ problem,\ the\ first\ character\ is\ an\ opperator\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ charType[\ character\ ]\ \=\ 4;\ \ //\ invalid\ character\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ else\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ charType[\ character\ ]\ \=\ 1;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ break;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ case\ "."\ \:\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ charType[\ character\ ]\ \=\ 3;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ break;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ default\ \:\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if\ (character\ \=\=\ 0)\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ charType[\ character\ ]\ \=\ 0;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ else\ if(\ charType[\ character\ -\ 1\ ]\ \=\=\ 0\ ||\ 1\ ||\ 3\ )\ //\ if\ preceded\ by\ number\ or\ decimal\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ charType[\ character\ ]\ \=\ 1;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ else\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ charType[\ character\ ]\ \=\ 0;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ \ \ \ \ if(\ charType[\ character\ ]\ \=\=\ 4\ )\ \ \ \ //invalid\ character\n\ \ \ \ \ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ //Theres\ a\ problem,\ I\ need\ to\ do\ something\ here\ but\ i\ have\ higher\ priorities\n\ \ \ \ \ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ \ \ \n\ \ \ \ \ \ \ \ ///////////////////////////////\n\ \ \ \ \ \ \ \ /////\ \ END\ STRING\ PARSING\ /////\n\ \ \ \ \ \ \ \ ///////////////////////////////\n\ \ \ \ }\n
comment1.params=
comment1.target=void\ simple()
comment2.params=args
comment2.target=void\ main(java.lang.String[])
numComments=3
